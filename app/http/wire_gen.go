// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package http

import (
	"com.ardafirdausr.cupid/app/http/handler"
	"com.ardafirdausr.cupid/internal"
	"com.ardafirdausr.cupid/internal/pkg/mongo"
	"com.ardafirdausr.cupid/internal/repository/mongo"
	"com.ardafirdausr.cupid/internal/service"
	"github.com/google/wire"
)

// Injectors from injector.go:

func InitializeApp() (*app, func(), error) {
	config2 := _wireConfigValue
	httpHttpConfig := config2.http
	httpHttpServer, err := newHTTPServer(httpHttpConfig)
	if err != nil {
		return nil, nil, err
	}
	mongoConfig := config2.mongo
	database, cleanup, err := mongo.NewMongoDatabase(mongoConfig)
	if err != nil {
		return nil, nil, err
	}
	userMongoRepository := repository.NewUserMongoRepository(database)
	userService := service.NewUserService(userMongoRepository)
	userHandler := handler.NewUserHandler(userService)
	httpHttpRouter := newRouter(userHandler)
	httpApp := newApp(httpHttpServer, httpHttpRouter)
	return httpApp, func() {
		cleanup()
	}, nil
}

var (
	_wireConfigValue = cfg
)

// injector.go:

var cfg = loadConfig()

var configSet = wire.NewSet(wire.Value(cfg), wire.FieldsOf(
	new(config),
	"common",
	"http",
	"mongo"),
)

var handlerSet = wire.NewSet(handler.NewUserHandler)

var serviceSet = wire.NewSet(wire.Bind(new(internal.UserServicer), new(*service.UserService)), service.NewUserService)

var repoSet = wire.NewSet(wire.Bind(new(internal.UserRepositorier), new(*repository.UserMongoRepository)), repository.NewUserMongoRepository)

var driverSet = wire.NewSet(mongo.NewMongoDatabase)
