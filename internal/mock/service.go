// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	dto "com.ardafirdausr.cupid/internal/dto"
	entity "com.ardafirdausr.cupid/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockUserServicer is a mock of UserServicer interface.
type MockUserServicer struct {
	ctrl     *gomock.Controller
	recorder *MockUserServicerMockRecorder
}

// MockUserServicerMockRecorder is the mock recorder for MockUserServicer.
type MockUserServicerMockRecorder struct {
	mock *MockUserServicer
}

// NewMockUserServicer creates a new mock instance.
func NewMockUserServicer(ctrl *gomock.Controller) *MockUserServicer {
	mock := &MockUserServicer{ctrl: ctrl}
	mock.recorder = &MockUserServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServicer) EXPECT() *MockUserServicerMockRecorder {
	return m.recorder
}

// UpdateUser mocks base method.
func (m *MockUserServicer) UpdateUser(ctx context.Context, param dto.UpdateUserParam) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, param)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserServicerMockRecorder) UpdateUser(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserServicer)(nil).UpdateUser), ctx, param)
}

// MockAuthServicer is a mock of AuthServicer interface.
type MockAuthServicer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServicerMockRecorder
}

// MockAuthServicerMockRecorder is the mock recorder for MockAuthServicer.
type MockAuthServicerMockRecorder struct {
	mock *MockAuthServicer
}

// NewMockAuthServicer creates a new mock instance.
func NewMockAuthServicer(ctrl *gomock.Controller) *MockAuthServicer {
	mock := &MockAuthServicer{ctrl: ctrl}
	mock.recorder = &MockAuthServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthServicer) EXPECT() *MockAuthServicerMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthServicer) Login(ctx context.Context, param dto.LoginUserParam) (*entity.User, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, param)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Login indicates an expected call of Login.
func (mr *MockAuthServicerMockRecorder) Login(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthServicer)(nil).Login), ctx, param)
}

// Register mocks base method.
func (m *MockAuthServicer) Register(ctx context.Context, param dto.RegisterUserParam) (*entity.User, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, param)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Register indicates an expected call of Register.
func (mr *MockAuthServicerMockRecorder) Register(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthServicer)(nil).Register), ctx, param)
}
