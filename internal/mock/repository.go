// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "com.ardafirdausr.cupid/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRepositorier is a mock of UserRepositorier interface.
type MockUserRepositorier struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositorierMockRecorder
}

// MockUserRepositorierMockRecorder is the mock recorder for MockUserRepositorier.
type MockUserRepositorierMockRecorder struct {
	mock *MockUserRepositorier
}

// NewMockUserRepositorier creates a new mock instance.
func NewMockUserRepositorier(ctrl *gomock.Controller) *MockUserRepositorier {
	mock := &MockUserRepositorier{ctrl: ctrl}
	mock.recorder = &MockUserRepositorierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositorier) EXPECT() *MockUserRepositorierMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepositorier) CreateUser(ctx context.Context, user *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositorierMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepositorier)(nil).CreateUser), ctx, user)
}

// GetUserByEmail mocks base method.
func (m *MockUserRepositorier) GetUserByEmail(ctx context.Context, email string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserRepositorierMockRecorder) GetUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserRepositorier)(nil).GetUserByEmail), ctx, email)
}

// GetUserByID mocks base method.
func (m *MockUserRepositorier) GetUserByID(ctx context.Context, id string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserRepositorierMockRecorder) GetUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserRepositorier)(nil).GetUserByID), ctx, id)
}

// UpdateUserByID mocks base method.
func (m *MockUserRepositorier) UpdateUserByID(ctx context.Context, id string, user *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserByID", ctx, id, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserByID indicates an expected call of UpdateUserByID.
func (mr *MockUserRepositorierMockRecorder) UpdateUserByID(ctx, id, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserByID", reflect.TypeOf((*MockUserRepositorier)(nil).UpdateUserByID), ctx, id, user)
}
